# HMM for portfolio optimization

# import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from hmmlearn import hmm
from sklearn.preprocessing import StandardScaler
import seaborn as sns
from matplotlib.ticker import FuncFormatter

# load dataset
data = pd.read_csv('Downloads/Combined_SPX_Data_3.csv')

# convert date columns to datetime format
data['Date'] = pd.to_datetime(data['Date'])

# calculate daily returns from S&P500 price
data['S&P500_Return'] = data['S&P500'].pct_change()
data = data.dropna() 

# Fisolate key features for regime distinction
features = ['S&P500_Return', 'PrDec', 'PrInc']

# preprocess the data
scaler = StandardScaler()
scaled_data = scaler.fit_transform(data[features])

# train HMM models with multiple starts
def train_hmm(X, n_states=2, n_attempts=20):
    best_model = None
    best_score = float('-inf')
    
    for i in range(n_attempts):
        model = hmm.GaussianHMM(
            n_components=n_states, 
            covariance_type="full", 
            n_iter=1000,
            tol=1e-4,
            random_state=i*42,
            init_params="mcw"
        )
        
        try:
            model.fit(X)
            score = model.score(X)
            
            if score > best_score:
                best_score = score
                best_model = model
            
        except Exception as e:
            print(f"Attempt {i+1} failed: {str(e)}")
    
    return best_model, best_score

# train the HMM model with 2 states
n_states = 2
best_model, best_score = train_hmm(scaled_data, n_states=n_states, n_attempts=10)

if best_model is None:
    print("Failed to train a converging model.")
else:
    # decode the hidden states
    hidden_states = best_model.predict(scaled_data)
    
    # add the hidden states to the dataframe
    data['Regime'] = hidden_states
    
    # analyze each regime
    print("\nRegime Analysis:")
    for i in range(best_model.n_components):
        regime_data = data[data['Regime'] == i]
        print(f"\nRegime {i} ({len(regime_data)} days):")
        print(f"  Avg S&P500 Return: {regime_data['S&P500_Return'].mean():.4f}")
        print(f"  Annualized Return: {regime_data['S&P500_Return'].mean() * 252:.4f}")
        print(f"  Annualized Volatility: {regime_data['S&P500_Return'].std() * np.sqrt(252):.4f}")
        print(f"  Avg PrDec: {regime_data['PrDec'].mean():.4f}")
        print(f"  Avg PrInc: {regime_data['PrInc'].mean():.4f}")
    
    # transition matrix
    print("\nTransition Matrix:")
    print(pd.DataFrame(
        best_model.transmat_,
        index=[f'From Regime {i}' for i in range(best_model.n_components)],
        columns=[f'To Regime {i}' for i in range(best_model.n_components)]
    ))
    
    # calculate regime persistence
    for i in range(best_model.n_components):
        persistence = 1 / (1 - best_model.transmat_[i, i])
    
    # backtest the trading strategy
    
    # get bond rate
    if 'Bond Rate' in data.columns:
        data['Cash_Return'] = data['Bond Rate'] / 252  # daily rate
    
    # Initialize portfolio values
    initial_investment = 100000
    
    # create columns
    data['BuyHold_Portfolio'] = initial_investment
    data['Trading_Portfolio'] = initial_investment
    
    # calculate cumulative returns for Buy-and-Hold
    cumulative_return = (1 + data['S&P500_Return']).cumprod()
    data['BuyHold_Portfolio'] = initial_investment * cumulative_return
    
    # calculate trading returns
    # trading approach:
    #   - if ratio > 1.2, BUY_CALL.
    #   - if ratio < 0.8, BUY_PUT.
    #   - otherwise, HOLD_CASH.
    
    # define regime returns
    data['Regime_Return'] = 0.0
    # compute the average probabilities and assign new strategy.
    strategy = {}
    for i in range(best_model.n_components):
        regime_data = data[data['Regime'] == i]
        pr_dec = regime_data['PrDec'].mean()
        pr_inc = regime_data['PrInc'].mean()
        ratio = pr_dec / pr_inc
        
        # switch signals:
        if ratio > 1.2:
            # prev: BUY_PUT; now BUY_CALL.
            strategy[i] = "BUY_CALL"
        elif ratio < 0.8:
            # prev: BUY_CALL; now BUY_PUT.
            strategy[i] = "BUY_PUT"
        else:
            strategy[i] = "HOLD_CASH"
    
    # backtesting definitions/assumptions:
    #   - BUY_CALL = fully invested in the S&P500 (since calls mimic long exposure)
    #   - BUY_PUT = cash
    #   - HOLD_CASH means remain in cash.
    for i in range(best_model.n_components):
        if strategy[i] == "BUY_CALL":
            data.loc[data['Regime'] == i, 'Regime_Return'] = data.loc[data['Regime'] == i, 'S&P500_Return']
        else:
            data.loc[data['Regime'] == i, 'Regime_Return'] = data.loc[data['Regime'] == i, 'Cash_Return']
    
    # calculate cumulative trading returns
    cumulative_return = (1 + data['Regime_Return']).cumprod()
    data['Trading_Portfolio'] = initial_investment * cumulative_return
    
    # calculate drawdowns for both strategies
    data['BuyHold_Peak'] = data['BuyHold_Portfolio'].cummax()
    data['BuyHold_Drawdown'] = (data['BuyHold_Portfolio'] / data['BuyHold_Peak'] - 1) * 100
    
    data['Trading_Peak'] = data['Trading_Portfolio'].cummax()
    data['Trading_Drawdown'] = (data['Trading_Portfolio'] / data['Trading_Peak'] - 1) * 100
    
    # calculate performance metrics for Buy-and-Hold
    bh_total_return = (data['BuyHold_Portfolio'].iloc[-1] / initial_investment - 1) * 100
    bh_annual_return = ((data['BuyHold_Portfolio'].iloc[-1] / initial_investment) ** (252 / len(data)) - 1) * 100
    bh_volatility = data['S&P500_Return'].std() * np.sqrt(252) * 100
    bh_sharpe = bh_annual_return / bh_volatility
    bh_max_drawdown = data['BuyHold_Drawdown'].min()
    
    # trading metrics
    rs_total_return = (data['Trading_Portfolio'].iloc[-1] / initial_investment - 1) * 100
    rs_annual_return = ((data['Trading_Portfolio'].iloc[-1] / initial_investment) ** (252 / len(data)) - 1) * 100
    rs_volatility = data['Regime_Return'].std() * np.sqrt(252) * 100
    rs_sharpe = rs_annual_return / rs_volatility
    rs_max_drawdown = data['Trading_Drawdown'].min()
    
    print("\nPerformance Metrics:")
    print(f"Time Period: {data['Date'].min().date()} to {data['Date'].max().date()}")
    print(f"Total Trading Days: {len(data)}")
    
    print("\nBuy-and-Hold Strategy:")
    print(f"  Total Return: {bh_total_return:.2f}%")
    print(f"  Annualized Return: {bh_annual_return:.2f}%")
    print(f"  Annualized Volatility: {bh_volatility:.2f}%")
    print(f"  Sharpe Ratio: {bh_sharpe:.2f}")
    print(f"  Maximum Drawdown: {bh_max_drawdown:.2f}%")
    
    print("\nTrading Strategy:")
    print(f"  Total Return: {rs_total_return:.2f}%")
    print(f"  Annualized Return: {rs_annual_return:.2f}%")
    print(f"  Annualized Volatility: {rs_volatility:.2f}%")
    print(f"  Sharpe Ratio: {rs_sharpe:.2f}")
    print(f"  Maximum Drawdown: {rs_max_drawdown:.2f}%")
    
    print("\nStrategy Comparison:")
    print(f"  Return Difference: {rs_total_return - bh_total_return:.2f}%")
    print(f"  Volatility Reduction: {bh_volatility - rs_volatility:.2f}%")
    print(f"  Drawdown Improvement: {bh_max_drawdown - rs_max_drawdown:.2f}%")
    
    # visualize the results
    plt.figure(figsize=(15, 12))
    
    def thousands(x, pos):
        return f'${x/1000:.0f}k'
    
    from matplotlib.ticker import FuncFormatter
    formatter = FuncFormatter(thousands)
    
    # Plot 1: Portfolio Values
    plt.subplot(3, 1, 1)
    plt.plot(data['Date'], data['BuyHold_Portfolio'], label='Buy-and-Hold', color='blue')
    plt.plot(data['Date'], data['Trading_Portfolio'], label='Trading', color='green')
    plt.title('Portfolio Value Comparison')
    plt.ylabel('Portfolio Value')
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.gca().yaxis.set_major_formatter(formatter)
    
    # add shaded backgrounds for different regimes
    last_date = None
    last_regime = None
    for date, regime in zip(data['Date'], data['Regime']):
        if last_regime is None:
            last_regime = regime
            last_date = date
        elif regime != last_regime:
            plt.axvspan(last_date, date, alpha=0.1, color=f'C{last_regime}')
            last_regime = regime
            last_date = date
    if last_date is not None:
        plt.axvspan(last_date, data['Date'].iloc[-1], alpha=0.1, color=f'C{last_regime}')
    
    # Plot 2: Drawdowns
    plt.subplot(3, 1, 2)
    plt.plot(data['Date'], data['BuyHold_Drawdown'], label='Buy-and-Hold Drawdown', color='red')
    plt.plot(data['Date'], data['Trading_Drawdown'], label='Trading Drawdown', color='orange')
    plt.title('Drawdown Comparison')
    plt.ylabel('Drawdown (%)')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # Plot 3: Relative Performance
    plt.subplot(3, 1, 3)
    relative_perf = (data['Trading_Portfolio'] / data['BuyHold_Portfolio'] - 1) * 100
    plt.plot(data['Date'], relative_perf, label='Relative Performance', color='purple')
    plt.axhline(y=0, color='black', linestyle='--', alpha=0.5)
    plt.title('Trading Outperformance')
    plt.ylabel('Outperformance (%)')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('trading_performance.png', dpi=300)
    plt.show()
    
    # save results to CSV
    data.to_csv('backtest_results.csv', index=False)
